from threading import Thread
from tkinter.filedialog import askopenfilename
from kivymd.uix.relativelayout import MDRelativeLayout
from kivymd.app import MDApp
from kivy.uix.label import Label
from kivy.uix.image import Image
from kivy.uix.button import Button
from kivy.core.window import Window
from pydub import AudioSegment
import speech_recognition as sr
import os

Window.size = (500, 600)

class MyApp(MDApp):

    def filechooser(self, event):
        self.file = askopenfilename(filetypes=[("Audio Files", '*.mp3;*.wav')])
        if self.file:
            self.audio_file = self.file
            self.wav_file = self.audio_file if self.audio_file.endswith('.wav') else self.audio_file.replace(".mp3", ".wav")
            self.locationLabel.text = self.audio_file
            self.convertButton.pos_hint = {'center_x': 0.5, 'center_y': .35}

    def convert_to_wav(self):
        if self.audio_file.endswith('.mp3'):
            sound = AudioSegment.from_mp3(self.audio_file)
            sound.export(self.wav_file, format="wav")

    def audio_to_text(self):
        recognizer = sr.Recognizer()
        with sr.AudioFile(self.wav_file) as source:
            audio_data = recognizer.record(source)
            try:
                self.text = recognizer.recognize_google(audio_data)
                print('Transcription Completed Successfully')
                self.successLabel.text = "Transcription completed"
                self.save_transcription()
            except sr.UnknownValueError:
                print("Google Speech Recognition could not understand audio")
                self.successLabel.text = "Could not transcribe audio"
            except sr.RequestError as e:
                print(f"Could not request results from Google Speech Recognition service; {e}")
                self.successLabel.text = "Transcription error"

    def save_transcription(self):
        text_file = self.audio_file.replace(os.path.splitext(self.audio_file)[1], ".txt")
        with open(text_file, 'w') as f:
            f.write(self.text)
        print(f"Transcription saved to {text_file}")

    def process_audio_thread(self, event):
        thread1 = Thread(target=self.process_audio)
        thread1.start()

    def process_audio(self):
        if self.audio_file.endswith('.mp3'):
            self.convert_to_wav()
        self.audio_to_text()

    def build(self):
        layout = MDRelativeLayout(md_bg_color=[248 / 255, 200 / 255, 220 / 255])

        self.img = Image(source='txt.png', size_hint=(.5, .5),
                         pos_hint={'center_x': 0.5, 'center_y': .85})

        self.filechooserLabel = Label(text="Please select the audio file to transcribe",
                                      pos_hint={'center_x': 0.5, 'center_y': .60},
                                      size_hint=(1, 1), font_size=20, color=(1, 0, 0))

        self.select_button = Button(text="Select", size_hint=(None, None), pos=(375, 340),
                                    height=40, on_press=self.filechooser)

        self.locationLabel = Label(text="", pos_hint={'center_x': .5, 'center_y': .45},
                                   size_hint=(1, 1), font_size=20, color=(1, 0, 0))

        self.convertButton = Button(text="Convert", pos_hint={'center_x': 0.5, 'center_y': .35},
                                    size_hint=(.2, .1), size=(75, 75), font_name="Comic",
                                    bold=True, font_size=24, background_color=(0, 1, 0),
                                    on_press=self.process_audio_thread)

        self.successLabel = Label(text="", pos_hint={'center_x': .5, 'center_y': .20},
                                  size_hint=(1, 1), font_size=20, color=(1, 0, 0))

        layout.add_widget(self.img)
        layout.add_widget(self.filechooserLabel)
        layout.add_widget(self.select_button)
        layout.add_widget(self.locationLabel)
        layout.add_widget(self.convertButton)
        layout.add_widget(self.successLabel)

        return layout

if __name__ == "__main__":
    MyApp().run()
